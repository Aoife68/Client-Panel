import { Injectable } from '@angular/core';
import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from 'angularfire2/firestore';

import { Observable } from 'rxjs/Observable';

import { Client } from '../models/client';


@Injectable()
export class ClientService {
  //declare variables/properties
  clientsCollection: AngularFirestoreCollection<Client>;
  clientDoc: AngularFirestoreDocument<Client>;
  clients: Observable<Client[]>;
  client: Observable<Client>;


  constructor(private angfirestore: AngularFirestore) { 
    //set clientCollection
    this.clientsCollection = this.angfirestore.collection('Clients', ref => ref.orderBy('lastName', 'asc'));
  }

  getClients(): Observable<Client[]>{
    //Get the clients with the id
    this.clients = this.clientsCollection.snapshotChanges().map(changes => {
      return changes.map(action => {
        //set data to Client
        const data = action.payload.doc.data() as Client;
        //retrieve the id which is automatically generated by firestore
        data.id = action.payload.doc.id;
        return data;
      })
    });
    //return retrieved clients from firestore db
    return this.clients;
  }

  //Create a new client in db
  newClient(client: Client){
    this.clientsCollection.add(client);
  }

  //Get client from db with id
  getClient(id: string): Observable<Client>{
    this.clientDoc = this.angfirestore.doc<Client>(`Clients/${id}`);
    this.client = this.clientDoc.snapshotChanges().map(action => {
      if(action.payload.exists === false){
        return null;
      } else{
        const data = action.payload.data() as Client;
        data.id = action.payload.id;
        return data;
      }
    });
    return this.client;
  }

  //Update client in db
  updateClient(client: Client){
    this.clientDoc = this.angfirestore.doc(`Clients/${client.id}`);
    this.clientDoc.update(client);
  }

  deleteClient(client: Client){
    this.clientDoc = this.angfirestore.doc(`Clients/${client.id}`);
    this.clientDoc.delete();
  }

}
